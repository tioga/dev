/*
 * Copyright 2012 Jacob Parr
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "jp.classmethod.aws:gradle-aws-plugin:0.21"
    }
}

project(':tioga-dev-common') {
    version = "5.2.3"

    dependencies {
        compile("org.slf4j:slf4j-api:1.7.20")
        compile("org.slf4j:jul-to-slf4j:1.7.20")
        compile("org.slf4j:log4j-over-slf4j:1.7.20")

        compile("ch.qos.logback:logback-classic:1.1.7")

        testCompile("org.testng:testng:6.8.21")
    }

    apply(from: urlCache.get("https://raw.githubusercontent.com/tioga/build-scripts/master/build-config-deployer.gradle"))

    apply plugin: "jp.classmethod.aws.s3"
    aws {
        profileName = 'tioga-build'
        region = 'ap-northeast-1'
    }
    task reportsToS3(type: jp.classmethod.aws.gradle.s3.SyncTask) {
        bucketName 'tioga'
        source file('build/reports')
        prefix "projects/dev/dev-common/reports/"

        metadataProvider { bucket, key, file ->
            com.amazonaws.services.s3.model.ObjectMetadata m = new com.amazonaws.services.s3.model.ObjectMetadata()
            m.setCacheControl("no-cache, no-store")
            return m
        }
    }
}
